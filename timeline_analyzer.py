import os
from argparse import ArgumentParser

from dotenv import load_dotenv
from tqdm import tqdm
from web3 import Web3

# --- –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ ---
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def establish_chronolink():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–≤—è–∑—å —Å –∞—Ä—Ö–∏–≤–æ–º –±–ª–æ–∫–æ–≤ Ethereum."""
    load_dotenv()
    infura_project_id = os.getenv("INFURA_PROJECT_ID")
    if not infura_project_id or infura_project_id == "YOUR_INFURA_PROJECT_ID_HERE":
        print(f"{Colors.FAIL}–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏: INFURA_PROJECT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.{Colors.ENDC}")
        print(f"–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª {Colors.BOLD}.env{Colors.ENDC} —Å –≤–∞—à–∏–º –∫–ª—é—á–æ–º –¥–æ—Å—Ç—É–ø–∞.")
        print("–§–æ—Ä–º–∞—Ç: INFURA_PROJECT_ID=\"abcdef1234567890\"")
        return None
    
    w3 = Web3(Web3.HTTPProvider(f'https://mainnet.infura.io/v3/{infura_project_id}'))
    
    if not w3.is_connected():
        print(f"{Colors.FAIL}–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞—Ä—Ö–∏–≤—É Ethereum.{Colors.ENDC}")
        return None
        
    print(f"{Colors.GREEN}–°–≤—è–∑—å —Å –∞—Ä—Ö–∏–≤–æ–º Ethereum —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. ChronoGraph –≥–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É.{Colors.ENDC}")
    return w3

def analyze_timeline(w3, artifact_address, period_in_blocks):
    """
    –†–µ–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ª–∏–Ω–∏—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–º (–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º).
    """
    try:
        target_artifact = w3.to_checksum_address(artifact_address)
    except ValueError:
        print(f"{Colors.FAIL}–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞.{Colors.ENDC}")
        return

    latest_block_number = w3.eth.block_number
    start_block = latest_block_number - period_in_blocks + 1

    print(f"\n{Colors.HEADER}{Colors.BOLD}üìú –ê–∫—Ç–∏–≤–∞—Ü–∏—è ChronoGraph... –†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏.{Colors.ENDC}")
    print(f"–ò–°–°–õ–ï–î–£–ï–ú–´–ô –ê–†–¢–ï–§–ê–ö–¢:{Colors.CYAN} {target_artifact}{Colors.ENDC}")
    print(f"–ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú–´–ô –ü–ï–†–ò–û–î:{Colors.CYAN} {period_in_blocks} –±–ª–æ–∫–æ–≤ (—ç–ø–æ—Ö–∞ —Å {start_block} –ø–æ {latest_block_number}){Colors.ENDC}")
    
    actors_in_period = set()
    total_events = 0

    pbar = tqdm(range(start_block, latest_block_number + 1), 
                desc=f"{Colors.BLUE}–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö—Ä–æ–Ω–∏–∫–∏{Colors.ENDC}",
                ncols=100)

    for block_num in pbar:
        try:
            block = w3.eth.get_block(block_num, full_transactions=True)
            for tx in block.transactions:
                if tx['to'] and w3.to_checksum_address(tx['to']) == target_artifact:
                    total_events += 1
                    # "–ê–∫—Ç–µ—Ä" - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–±—ã—Ç–∏–π
                    actor = w3.to_checksum_address(tx['from'])
                    actors_in_period.add(actor)
        except Exception as e:
            tqdm.write(f"{Colors.WARNING}–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Å–µ–∫—Ç–æ—Ä –≤ —Ö—Ä–æ–Ω–∏–∫–µ {block_num}: {e}{Colors.ENDC}")
            continue

    # --- –†–ê–°–ß–ï–¢ –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –ú–ï–¢–†–ò–ö ---
    total_unique_actors = len(actors_in_period)
    
    # –°–∏–º—É–ª—è—Ü–∏—è. "–ù–æ–≤—ã–µ" –∞–∫—Ç–µ—Ä—ã - —ç—Ç–æ –≤—Å–µ, –∫—Ç–æ –ø–æ—è–≤–∏–ª—Å—è –≤ –¥–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥.
    # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–µ—Ä—Å–∏—è —Å—Ä–∞–≤–Ω–∏–≤–∞–ª–∞ –±—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–µ—Ä–æ–≤ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö "—ç–ø–æ—Ö".
    known_actors_from_past = set() 
    first_time_actors = actors_in_period - known_actors_from_past
    
    # –ù–∞—à–∞ –∫–ª—é—á–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ü–æ—è–≤–ª–µ–Ω–∏—è!
    emergence_coefficient = (len(first_time_actors) / total_unique_actors) * 100 if total_unique_actors > 0 else 0

    # --- –í–´–í–û–î –ò–°–¢–û–†–ò–ß–ï–°–ö–û–ì–û –û–¢–ß–ï–¢–ê ---
    print(f"\n{Colors.HEADER}{Colors.BOLD}üìñ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç ChronoGraph:{Colors.ENDC}")
    print("=" * 60)
    print(f"–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥: {Colors.BOLD}{Colors.GREEN}{total_events}{Colors.ENDC}")
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–µ—Ä–æ–≤ (—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤): {Colors.BOLD}{Colors.GREEN}{total_unique_actors}{Colors.ENDC}")
    
    print(f"\n{Colors.HEADER}{Colors.UNDERLINE}–ö–ª—é—á–µ–≤–æ–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å:{Colors.ENDC}")
    print(f"‚ú® {Colors.WARNING}–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ü–æ—è–≤–ª–µ–Ω–∏—è (Emergence Coefficient):{Colors.ENDC} "
          f"{Colors.BOLD}{emergence_coefficient:.2f}%{Colors.ENDC}")
    print(f"   {Colors.WARNING}(–î–æ–ª—è –Ω–æ–≤—ã—Ö –∞–∫—Ç–µ—Ä–æ–≤, –≤–ø–µ—Ä–≤—ã–µ –ø–æ—è–≤–∏–≤—à–∏—Ö—Å—è –Ω–∞ —Å—Ü–µ–Ω–µ){Colors.ENDC}")
    print("=" * 60)
    
    if emergence_coefficient > 80:
         print(f"{Colors.GREEN}–ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô –í–ï–†–î–ò–ö–¢: '–†–µ–Ω–µ—Å—Å–∞–Ω—Å'. –ü–µ—Ä–∏–æ–¥ –≤–∑—Ä—ã–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ª–∏—Ü.{Colors.ENDC}")
    elif emergence_coefficient > 50:
        print(f"{Colors.CYAN}–ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô –í–ï–†–î–ò–ö–¢: '–≠–ø–æ—Ö–∞ –ü—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è'. –°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–∏—Ç–æ–∫ –Ω–æ–≤—ã—Ö –∏–¥–µ–π –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.{Colors.ENDC}")
    else:
        print(f"{Colors.BLUE}–ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô –í–ï–†–î–ò–ö–¢: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥'. –ò—Å—Ç–æ—Ä–∏—è –ø–∏—à–µ—Ç—Å—è —É—Å—Ç–æ—è–≤—à–∏–º—Å—è –∫—Ä—É–≥–æ–º –∞–∫—Ç–µ—Ä–æ–≤.{Colors.ENDC}")


if __name__ == "__main__":
    parser = ArgumentParser(description="ChronoGraph - –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ–Ω—á–µ–π–Ω-–∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤.")
    parser.add_argument("artifact", help="–ê–¥—Ä–µ—Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ (—Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞) –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.")
    parser.add_argument("-p", "--period", type=int, default=1000, help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏—Å—Å–ª–µ–¥—É–µ–º–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ –±–ª–æ–∫–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1000).")
    
    args = parser.parse_args()
    
    chronolink = establish_chronolink()
    if chronolink:
        analyze_timeline(chronolink, args.artifact, args.period)
